// Code generated by hertz generator.

package main

import (
	"context"
	"time"

	"ffmall/app/frontend/biz/dal"
	"ffmall/app/frontend/biz/router"
	"ffmall/app/frontend/conf"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/app/middlewares/server/recovery"
	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/hertz/pkg/common/hlog"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/hertz-contrib/cors"
	"github.com/hertz-contrib/gzip"
	"github.com/hertz-contrib/logger/accesslog"
	hertzlogrus "github.com/hertz-contrib/logger/logrus"
	"github.com/hertz-contrib/pprof"
	"github.com/hertz-contrib/sessions"
	"github.com/hertz-contrib/sessions/cookie"
	"go.uber.org/zap/zapcore"
	"gopkg.in/natefinch/lumberjack.v2"
)

func main() {
	// init dal
	dal.Init()

	address := conf.GetConf().Hertz.Address        // 配置文件中获取地址
	h := server.New(server.WithHostPorts(address)) // 初始化 Hertz 服务器

	store := cookie.NewStore([]byte("genius is 10, 10 is genius"))
	h.Use(sessions.New("mysession", store)) //

	registerMiddleware(h) // 注册中间件

	h.LoadHTMLGlob("template/*") // 加载模板文件
	h.Static("/static", "./")    // 加载静态文件
	// add a ping route to test
	h.GET("/ping", func(c context.Context, ctx *app.RequestContext) {
		var resp = make(map[string]any)
		items := []map[string]any{
			{"Name": "T-shirt-1", "Price": 100, "Picture": "/static/image/t-shirt-1.jpeg"},
			{"Name": "T-shirt-2", "Price": 110, "Picture": "/static/image/t-shirt-1.jpeg"},
			{"Name": "T-shirt-3", "Price": 120, "Picture": "/static/image/t-shirt-2.jpeg"},
			{"Name": "T-shirt-4", "Price": 130, "Picture": "/static/image/notebook.jpeg"},
			{"Name": "T-shirt-5", "Price": 140, "Picture": "/static/image/t-shirt-1.jpeg"},
			{"Name": "T-shirt-6", "Price": 150, "Picture": "/static/image/t-shirt.jpeg"},
		}
		resp["Title"] = "Hot Sales"
		resp["items"] = items
		ctx.HTML(consts.StatusOK, "home", resp)

		session := sessions.Default(ctx)
		v := session.Get("user_ID")
		if v != nil {
			user_ID := v.(int32)
			print("user_ID: ", user_ID, "\n")
		}
	})

	h.GET("/sign-in", func(c context.Context, ctx *app.RequestContext) {
		var resp = make(map[string]any) //声明哈希表
		resp["next"] = ctx.Request.Header.Get("Referer")
		ctx.HTML(consts.StatusOK, "sign-in", resp)
	})

	router.GeneratedRegister(h) // 注册路由

	h.Spin()
}

func registerMiddleware(h *server.Hertz) {
	// log
	logger := hertzlogrus.NewLogger()
	hlog.SetLogger(logger)
	hlog.SetLevel(conf.LogLevel())
	asyncWriter := &zapcore.BufferedWriteSyncer{
		WS: zapcore.AddSync(&lumberjack.Logger{
			Filename:   conf.GetConf().Hertz.LogFileName,
			MaxSize:    conf.GetConf().Hertz.LogMaxSize,
			MaxBackups: conf.GetConf().Hertz.LogMaxBackups,
			MaxAge:     conf.GetConf().Hertz.LogMaxAge,
		}),
		FlushInterval: time.Minute,
	}
	hlog.SetOutput(asyncWriter)
	h.OnShutdown = append(h.OnShutdown, func(ctx context.Context) {
		asyncWriter.Sync()
	})

	// pprof
	if conf.GetConf().Hertz.EnablePprof {
		pprof.Register(h)
	}

	// gzip
	if conf.GetConf().Hertz.EnableGzip {
		h.Use(gzip.Gzip(gzip.DefaultCompression))
	}

	// access log
	if conf.GetConf().Hertz.EnableAccessLog {
		h.Use(accesslog.New())
	}

	// recovery
	h.Use(recovery.Recovery())

	// cores
	h.Use(cors.Default())
}
